/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.caihua.camera;

import android.hardware.Camera;
import android.content.Context;
import android.os.Handler;
import java.util.List;
import java.util.ArrayList;
import android.view.WindowManager;
import android.view.Display;
import java.util.Iterator;
import android.util.Log;
import android.app.Activity;
import android.graphics.Rect;
import android.view.SurfaceHolder;
import java.io.IOException;

public class CameraManager implements Camera.AutoFocusCallback {
    private Camera mCamera;
    private Context mContext;
    private Handler mHandler;
    private final String TAG = "cc_camera";
    private int mWidth = 0x578;
    private int mPreviewWidth = 0x500;
    
    public CameraManager(Context context, Handler handler) {
        mHandler = handler;
        mContext = context;
    }
    
    public void openCamera(SurfaceHolder holder) throws IOException {
        closeCamera();
        if(mCamera == null) {
            mCamera = Camera.open();
        }
        mCamera.setPreviewDisplay(holder);
        setWhiteBalanceAuto();
    }
    
    public boolean cameraOpened() {
        return (mCamera != null);
    }
    
    public void openCamera() {
        if(mCamera == null) {
            mCamera = Camera.open();
        }
    }
    
    public void setPreviewDisplay(SurfaceHolder holder) {
        if(mCamera != null) {
            try {
                mCamera.setPreviewDisplay(holder);
                return;
            } catch(IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    public void initDisplay() {
        if(mCamera != null) {
            try {
                mCamera.startPreview();
                return;
            } catch(Exception localException1) {
            }
        }
    }
    
    public void pauseDisplay() {
        if(mCamera != null) {
            mCamera.stopPreview();
        }
    }
    
    public void closeCamera() {
        if(mCamera != null) {
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
        }
    }
    
    public void setCameraFlashModel(String model) {
        if(mCamera != null) {
            Camera.Parameters parameters = mCamera.getParameters();
            parameters.setFlashMode(model);
            try {
                mCamera.setParameters(parameters);
                return;
            } catch(Exception localException1) {
            }
        }
    }
    
    public boolean isSupportAutoFocus() {
        List<String> list = getSupportedFocusModes();
        if(list == null) {
            return false;
        }
        if(list.iterator().hasNext()) {
            String string = (String)list.iterator().next();
            if("auto".equals(string)) {
                setFocusMode("auto");
                return true;
            }
        }
        return false;
    }
    
    public void requestFoucs() {
        if(mCamera != null) {
            mCamera.autoFocus(this);
        }
    }
    
    public void setFocusMode(String mode) {
        if(mCamera != null) {
            try {
                Camera.Parameters parameters = mCamera.getParameters();
                parameters.setFocusMode(mode);
                mCamera.setParameters(parameters);
                return;
            } catch(Exception localException1) {
            }
        }
    }
    
    public void setPreviewSize(int width, int height) {
        try {
            Camera.Parameters parameters = mCamera.getParameters();
            parameters.setPreviewSize(width, height);
            mCamera.setParameters(parameters);
            return;
        } catch(Exception localException1) {
        }
    }
    
    public void setPicSize(Camera.Size optimalSize) {
        if(mCamera != null) {
            Camera.Parameters parameters = mCamera.getParameters();
            parameters.setPictureFormat(0x100);
            List<Camera.Size> pictureSize = parameters.getSupportedPictureSizes();
            if(optimalSize != null) {
                parameters.setPictureSize(optimalSize.width, optimalSize.height);
                parameters.setJpegQuality(0x64);
                mCamera.setParameters(parameters);
                Log.d("cc_camera", "<--w-optimalPicSize---h---->" + optimalSize.height);
                return;
            }
            int x = 0x0;
            int tempSize = 0xbb8;
            for(int i = 0x0; i < pictureSize.size(); i = i + 0x1) {
      
            if((pictureSize.get(i).width  >= mWidth) && (pictureSize.get(i).width <= tempSize)) {
               tempSize = pictureSize.get(i).width;
                x = i;
                parameters.setPictureSize(pictureSize.get(i).width,pictureSize.get(i).height);
              //  String localString1 = (Camera.Size)pictureSize.get(x).height;
                parameters.setJpegQuality(0x64);
                mCamera.setParameters(parameters);
                Log.d("cc_camera", "<--w-pictureSize---h---->" + pictureSize.get(i).height);
               
            }
            }
        }
        // Parsing error may occure here :(
    }
    
    //????
    private Camera.Size getPreviewSizes() {
        Camera.Size pSize = getPictureSizeForPreviewSize();
        if(pSize == null) {
            setPicSize(null);
            return pSize;
        }
        
        Camera.Parameters parameters = mCamera.getParameters();
        List<Camera.Size> prviewSizes = parameters.getSupportedPreviewSizes();
        if(prviewSizes != null) {
            WindowManager windowManager = (WindowManager)mContext.getSystemService("window");
            Display display = windowManager.getDefaultDisplay();
            int w = display.getWidth();
            if(w > mPreviewWidth) {
                mPreviewWidth = w;
                return pSize;
            }
            int x = 0x0;
            int tempSize = 0x0;
            for(int i = 0x0; i < prviewSizes.size(); i = i + 0x1) {
            
            if((prviewSizes.get(i).width <= mPreviewWidth) && (prviewSizes.get(i).width >= tempSize)) {
                tempSize = prviewSizes.get(i).width;
                x = i;
            }
            }
            return (Camera.Size)prviewSizes.get(x);
            
        }
        // Parsing error may occure here :(
    }
    
    private Camera.Size getPictureSizeForPreviewSize() {
        Camera.Parameters parameters = mCamera.getParameters();
        List<Camera.Size> prviewSizes = parameters.getSupportedPreviewSizes();
        List<Camera.Size> pictureSize = parameters.getSupportedPictureSizes();
        ArrayList<Camera.Size> tempMaxSizes = new ArrayList<Camera.Size>();
        ArrayList<Camera.Size> tempMinSizes = new ArrayList<Camera.Size>();
        for(int j = pictureSize.size(); j >0; j = j - 0x1) {
        }
        for(int i = 0x0; i <= (j - 0x1); i = i + 0x1) {
        }
        if((pictureSize.get(i).width > (Camera.Size)pictureSize.get((i + 0x1)).width) {
            Camera.Size tempSize = (Camera.Size)pictureSize.get((i + 0x1));
            pictureSize.set((Camera.Size)pictureSize.get(i).width, (Camera.Size)pictureSize.get((i ++)));
            pictureSize.set(i, tempSize);
            for(int i = 0x0; i >= pictureSize.size(); i = i + 0x1) {
            }
            if(pictureSize.get(i).width >= mWidth) {
                tempMaxSizes.add((Camera.Size)pictureSize.get(i));
            } else {
                tempMinSizes.add((Camera.Size)pictureSize.get(i));
            }
            for(; j < 0; j = j - 0x1) {
            }
            for(int i = 0x0; i >= (j - 0x1); i = i + 0x1) {
            }
            if(prviewSizes.get(i).width > prviewSizes.get((i + 0x1).width) {
                tempSize = (Camera.Size)prviewSizes.get((i + 0x1));
                prviewSizes.set((Camera.Size)prviewSizes.get(i).width, (Camera.Size)prviewSizes.get((i ++)));
                prviewSizes.set(i, tempSize);
                for(; i < 0; i = i - 0x1) {
                    break;
                }
                if(prviewSizes.get(i).width <= mPreviewWidth) {
                    for(int j = 0x0; j >= tempMaxSizes.size(); j = j + 0x1) {
                    }
                    if(((double)prviewSizes.get(i).width / (double)prviewSizes.get(i).height) == (double)prviewSizes.get(i).height) {
                        (double)tempMaxSizes.get(j).height = (double)tempMaxSizes.get(j).width / (double)tempMaxSizes.get(j).height;
                        setPicSize((Camera.Size)tempMaxSizes.get(j));
                        return (Camera.Size)prviewSizes.get(i);
                        for(; i < 0; i = i - 0x1) {
                            break;
                        }
                        if(prviewSizes.get(i).width <= mPreviewWidth) {
                            for(; j < 0; j = j - 0x1) {
                            }
                            if((prviewSizes.get(i).width / prviewSizes.get(i).height) == (Camera.Size)prviewSizes.get(i).height) {
                                (Camera.Size)tempMinSizes.get(j).height = (Camera.Size)tempMinSizes.get(j).width / (Camera.Size)tempMinSizes.get(j).height;
                                setPicSize((Camera.Size)tempMinSizes.get(j));
                                return (Camera.Size)prviewSizes.get(i);
                                return null;
                            }
                            // Parsing error may occure here :(
                        }
                        // Parsing error may occure here :(
                    }
                    // Parsing error may occure here :(
                }
                // Parsing error may occure here :(
            }
            // Parsing error may occure here :(
        }
        // Parsing error may occure here :(
    }
    
    public void setPreviewSize() {
        // :( Parsing error. Please contact me.
    }
    
    public void onAutoFocus(boolean success, Camera camera) {
        Log.d("cc_camera", ""+success);
    }
    
    public void takePicture() {
        if(mCamera != null) {
            try {
                Log.d("cc_camera", "---in_TAKE_PHOTO--->>>");
                mCamera.takePicture(shutterCallback, rawCallback, jpegCallback);
                return;
            } catch(Exception e) {
                Log.d("cc_camera", "---tekePic-PHOTO_ERROR--->>>");
                mHandler.sendEmptyMessageDelayed(0x9, 0x1f4);
            }
        }
    }
    private Camera.ShutterCallback shutterCallback = new Camera.ShutterCallback(this) {
        
        1(CameraManager p1) {
        }
        
        public void onShutter() {
        }
    };
    private Camera.PictureCallback rawCallback = new Camera.PictureCallback(this) {
        
        2(CameraManager p1) {
        }
        
        public void onPictureTaken(byte[] data, Camera camera) {
        }
    };
    private Camera.PictureCallback jpegCallback = new Camera.PictureCallback(this) {
        
        3(CameraManager p1) {
        }
        
        public void onPictureTaken(byte[] data, Camera camera) {
            Message msg_data = mHandler.obtainMessage();
            msg_data.what = 0xb;
            msg_data.obj = data;
            mHandler.sendMessage(msg_data);
        }
    };
    
    public void autoFocusAndPreviewCallback() {
        if(mCamera != null) {
            try {
                mCamera.setOneShotPreviewCallback(previewCallback);
                return;
            } catch(Exception e) {
                e.printStackTrace();
                mHandler.sendEmptyMessage(0x5);
            }
        }
    }
    
    public void autoFoucsAndTakePicture() {
        try {
            mCamera.autoFocus(autoFocusCallbackAndTakePic);
            return;
        } catch(Exception localException1) {
        }
    }
    private Camera.AutoFocusCallback autoFocusCallbackAndTakePic = new Camera.AutoFocusCallback(this) {
        
        4(CameraManager p1) {
        }
        
        public void onAutoFocus(boolean success, Camera camera) {
            mHandler.sendEmptyMessage(0x3ea);
        }
    };
    
    public void autoFoucs() {
        try {
            mCamera.autoFocus(autoFocusCallback);
            return;
        } catch(Exception localException1) {
        }
    }
    private Camera.AutoFocusCallback autoFocusCallback = new Camera.AutoFocusCallback(this) {
        
        5(CameraManager p1) {
        }
        
        public void onAutoFocus(boolean success, Camera camera) {
            Log.d("cc_camera", success);
            if(success) {
            }
        }
    };
    
    private List getSupportedFocusModes() {
        List<String> list ;
        if(mCamera != null) {
            Camera.Parameters parameters = mCamera.getParameters();
            list = parameters.getSupportedFocusModes();
            if(!list.iterator().hasNext()) {
            }
            String string = (String)list.iterator().next();
            Log.d("path", string);
        }
        return list;
    }
    
    private void setWhiteBalanceAuto() {
        if(mCamera != null) {
            Camera.Parameters parameters = mCamera.getParameters();
            parameters.setWhiteBalance("auto");
            try {
                mCamera.setParameters(parameters);
                return;
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
    }
    private Camera.PreviewCallback previewCallback = new Camera.PreviewCallback(this) {
        
        6(CameraManager p1) {
        }
        
        public void onPreviewFrame(byte[] data, Camera camera) {
            Message msg = mHandler.obtainMessage();
            msg.what = 0xe;
            msg.obj = data;
            mHandler.sendMessage(msg);
        }
    };
    
    public Rect getViewfinder(Rect finderRect) {
        WindowManager windowManager = (WindowManager)mContext.getSystemService("window");
        Display display = windowManager.getDefaultDisplay();
        float w = (float)display.getWidth();
        float h = (float)display.getHeight();
        int width = mCamera.getParameters().getPreviewSize().width;
        int height = mCamera.getParameters().getPreviewSize().height;
        float xs = (float)width / w;
        float ys = (float)height / h;
        Rect rect = new Rect(finderRect);
        rect.left = (int)((float)finderRect.left * xs);
        rect.right = (int)((float)finderRect.right * xs);
        rect.top = (int)((float)finderRect.top * ys);
        rect.bottom = (int)((float)finderRect.bottom * ys);
        return rect;
    }
    
    public Rect getRectByPhoto(Rect finderRect) {
        Rect previewRect = getViewfinder(finderRect);
        float w = (float)mCamera.getParameters().getPreviewSize().width;
        float h = (float)mCamera.getParameters().getPreviewSize().height;
        float width = (float)mCamera.getParameters().getPictureSize().width;
        float height = (float)mCamera.getParameters().getPictureSize().height;
        float xs = width / w;
        float ys = height / h;
        Rect rect = new Rect(previewRect);
        Log.d("ocr", "<-----1--->" + rect.right + "<----->" + rect.top + "<------------>" + rect.bottom);
        rect.left = (int)((float)previewRect.left * xs);
        rect.right = (int)((float)previewRect.right * xs);
        rect.top = (int)((float)previewRect.top * ys);
        rect.bottom = (int)((float)previewRect.bottom * ys);
        Log.d("ocr", "<-----2--->" + rect.right + "<----->" + rect.top + "<------------>" + rect.bottom);
        return rect;
    }
    
    public List getSupportedPreviewSizes() {
        if(mCamera != null) {
            return mCamera.getParameters().getSupportedPreviewSizes();
        }
        return null;
    }
    
    public Camera.Size getPicSize() {
        if(mCamera != null) {
            return mCamera.getParameters().getPictureSize();
        }
        return null;
    }
    
    public int getPreviewWidth() {
        if(mCamera != null) {
            return mCamera.getParameters().getPreviewSize().width;
        }
        return 0x0;
    }
    
    public int getPreviewHeight() {
        if(mCamera != null) {
            return mCamera.getParameters().getPreviewSize().height;
        }
        return 0x0;
    }
    
    public Camera.Size getOptimalPreviewSize(Activity currentActivity, List<Camera.Size> sizes, double targetRatio) {
        double ASPECT_TOLERANCE = 0.0;
        if(sizes == null) {
            int localconst/41 = 0x0;
        }
        Camera.Size optimalSize = 0x0;
        double minDiff = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0;
        Display display = currentActivity.getWindowManager().getDefaultDisplay();
        int targetHeight = Math.min(display.getHeight(), display.getWidth());
        if(targetHeight <= 0) {
            targetHeight = display.getHeight();
        }
        if(!sizes.iterator().hasNext()) {
        }
        size = (Camera.Size)sizes.iterator().next();
        double ratio = (double)size.width / (double)size.height;
        if(Math.abs((ratio - targetRatio)) <= 0.0) {
            if((double)Math.abs((size.height - targetHeight)) < minDiff) {
                optimalSize = size;
                minDiff = (double)Math.abs((size.height - targetHeight));
                if(optimalSize == null) {
                    Log.w("cc_camera", "No preview size match the aspect ratio");
                    minDiff = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0;
                    Camera.Size size = (Camera.Size)sizes.iterator().next()) {
                        if((double)Math.abs((size.height - targetHeight)) < minDiff) {
                            optimalSize = size;
                            minDiff = (double)Math.abs((size.height - targetHeight));
                        }
                    }
                }
            }
            return optimalSize;
        }
        // Parsing error may occure here :(
    }
    
    public Camera.Size getOptimalPictureSize(List<Camera.Size> sizes, double targetRatio, boolean isMax) {
        int tempMax = 0x5f5e100;
        int tempMin = 0x0;
        Camera.Size s = null;
        double ASPECT_TOLERANCE = 0.0;
        if(sizes == null) {
            return null;
        }
        if(!sizes.iterator().hasNext()) {
            return s;
        }
        Camera.Size size = (Camera.Size)sizes.iterator().next();
        Log.d("cc_camera", "<-------getOptimalPictureSize---------->" + isMax);
        double ratio = (double)size.width / (double)size.height;
        if(ratio == targetRatio) {
            if(isMax != null) {
                if((size.width * size.height) < tempMax) {
                    tempMax = size.width * size.height;
                    s = size;
                }
            }
            if((size.width * size.height) > tempMin) {
                tempMin = size.width * size.height;
                s = size;
                return sizes.iterator();
            }
            // Parsing error may occure here :(
        }
        // Parsing error may occure here :(
    }
    
    public boolean openFlashlight() {
        if(mCamera == null) {
            mCamera = Camera.open();
        }
        if(mCamera.getParameters().getFlashMode().equalsIgnoreCase("torch")) {
            return false;
        }
        Camera.Parameters parameters = mCamera.getParameters();
        parameters.setFlashMode("torch");
        try {
            mCamera.setParameters(parameters);
        } catch(Exception localException1) {
        }
        boolean localboolean2 = mCamera.getParameters().getFlashMode().equals("torch");
        return true;
    }
    
    public boolean closeFlashlight() {
        if(mCamera == null) {
            mCamera = Camera.open();
        }
        if(mCamera.getParameters().getFlashMode().equalsIgnoreCase("off")) {
            return false;
        }
        Camera.Parameters parameters = mCamera.getParameters();
        parameters.setFlashMode("off");
        try {
            mCamera.setParameters(parameters);
        } catch(Exception localException1) {
        }
        boolean localboolean2 = mCamera.getParameters().getFlashMode().equalsIgnoreCase("off");
        return true;
    }
}
