/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.caihua.ui.offline;

import android.app.Activity;
import android.view.SurfaceHolder;
import android.widget.RelativeLayout;
import android.view.Display;
import android.widget.ImageView;
import android.os.Handler;
import android.view.WindowManager;
import android.widget.ProgressBar;
import android.graphics.Rect;
import android.view.SurfaceView;
import android.widget.TextView;
import android.view.View;
import android.content.Context;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.Bitmap;
import android.os.Build;
import android.util.Log;
import android.os.Bundle;
import android.view.Window;
import android.os.Environment;
import android.widget.Toast;
import java.io.File;

import com.caihua.camera.CameraManager;
import com.caihua.camera.OcrManager;
import com.caihua.camera.UtilApp;
import com.caihua.widget.RotateImageView;
import com.caihua.widget.ViewfinderView;

import android.content.Intent;
import android.view.Surface;

public class CameraActivity extends Activity implements SurfaceHolder.Callback {
	
    private final String TAG=getClass().getSimpleName();
    private boolean autoFoucs;
    private int btWidth;
    private RotateImageView btnCancel;
    private RotateImageView btnFlash;
    private RelativeLayout.LayoutParams btn_CancelParams;
    private RelativeLayout.LayoutParams btn_FlashParams;
    private boolean cameraError;
    private CameraManager cameraManager;
    private int color;
    private Display display;
    private ViewfinderView finderView;
    private int goonTime;
    private boolean isAutoIn;
    private boolean isBlurOn;
    private boolean isFlashOn;
    private boolean isManaulIn;
    private ImageView iv;
    private long lastClickTime;
    private Thread mCameraOpenThread;
    private Handler mHandler;
    private WindowManager manager;
    private int nDisplayHeight;
    private int nDisplayWidth;
    private OcrManager ocrManager;
    private boolean preview;
    private ProgressBar progressBar;
    private int rateTime;
    private boolean recognAll;
    private Rect rect;
    private Rect rect_pthoto;
    private int rightNow;
    long startBCRTime;
    private long startRecogTime;
    private int startTime;
    private SurfaceHolder surfaceHolder;
    private SurfaceView sv_preview;
    private int textSize;
    private int textWidth;
    private String tip;
    private TextView tipView;
    private RelativeLayout.LayoutParams tip_Params;
    
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(0x80, 0x80);
        if(!Environment.getExternalStorageState().equals("mounted")) {
            Toast.makeText(getBaseContext(), "\u8bf7\u63d2\u5165\u5b58\u50a8\u5361", 0x1).show();
            finish();
        }
        File file = new File(UtilApp.completeManagePath());
        if(!file.exists()) {
            file.mkdirs();
        }
        manager = (WindowManager)getBaseContext().getSystemService("mounted");
        String localContext1 = "window";
        display = manager.getDefaultDisplay();
        nDisplayWidth = display.getWidth();
        nDisplayHeight = display.getHeight();
        if(nDisplayWidth < nDisplayHeight) {
            int w = nDisplayWidth;
            nDisplayWidth = nDisplayHeight;
            nDisplayHeight = w;
        }
//        Log.e("QINBO", ("DISPLAY_w:").append(nDisplayWidth).append("  DISPLAY_y:"));
 //       localContext1 = ("DISPLAY_w:").append(nDisplayWidth).append("  DISPLAY_y:").append(nDisplayHeight).toString();
        textWidth = ((nDisplayHeight * 0x2) / 0x3);
        Bundle bundle = getIntent().getExtras();
        if(bundle != null) {
            tip = bundle.getString("tip");
            if(tip == null) {
                tip = "";
            }
            textSize = bundle.getInt("size");
            color = bundle.getInt("color");
            textWidth = bundle.getInt("width");
            if(textSize <= 0) {
                textSize = 0x14;
            }
            if(textWidth <= 0) {
                textWidth = ((nDisplayHeight * 0x2) / 0x3);
            }
            if(color == 0) {
                color = -0x1;
            }
        }
        setContentView(initView());
        recognAll = getIntent().getBooleanExtra("ISRECOGNALL", true);
        cameraManager = new CameraManager(getBaseContext(), mHandler);
        mCameraOpenThread.start();
        try {
            mCameraOpenThread.join();
           // mCameraOpenThread = 0x0;
        } catch(Exception e) {
            e.printStackTrace();
            cameraError = true;
        }
        if(cameraError) {
            Toast.makeText(getBaseContext(), "\u7167\u76f8\u673a\u672a\u542f\u52a8\uff01\u8bf7\u5f00\u673a\u91cd\u542f", 0x0).show();
            finish();
        }
        setParameters();
    }
    
    private void setParameters() {
        // :( Parsing error. Please contact me.
    }
    
    private View initView() {
    	
    	
        RelativeLayout rl_body = new RelativeLayout(getBaseContext());
        RelativeLayout.LayoutParams body_LayoutParams = new RelativeLayout.LayoutParams(-1, -1);
        rl_body.setLayoutParams(body_LayoutParams);
        
        sv_preview = new SurfaceView(getBaseContext());
        RelativeLayout.LayoutParams sv_LayoutParams = new RelativeLayout.LayoutParams(-2, -2);
        sv_LayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        sv_preview.setLayoutParams(sv_LayoutParams);
        rl_body.addView(sv_preview);
        
        iv = new ImageView(getBaseContext());
        LinearLayout.LayoutParams iv_LayoutParams = new LinearLayout.LayoutParams(-1,-1);
        iv.setLayoutParams(iv_LayoutParams);
        iv.setScaleType(ImageView.ScaleType.FIT_XY);
        iv.setVisibility(View.GONE);
        rl_body.addView(iv);
        
        finderView = new ViewfinderView(getBaseContext());
        rl_body.addView(finderView);
        
       //???bitmap id
        BitmapDrawable bd = (BitmapDrawable)getResources().getDrawable(0x7f020002);
        btWidth = bd.getBitmap().getWidth();
        btnFlash = new RotateImageView(getBaseContext());
        btnCancel = new RotateImageView(getBaseContext());
        btn_FlashParams = new RelativeLayout.LayoutParams(btWidth, btWidth);
        btn_CancelParams = new RelativeLayout.LayoutParams(btWidth, btWidth);
        btn_CancelParams.addRule(0xb);
        
        btnFlash.setImageDrawable(getResources().getDrawable(0x7f020002));
        btnCancel.setImageDrawable(getResources().getDrawable(btWidth));
        btWidth = 0x7f020000;
        btnFlash.setLayoutParams(btn_FlashParams);
        btnCancel.setLayoutParams(btn_CancelParams);
        btnFlash.setTag("falsh");
        btnCancel.setTag("cancel");
        btnFlash.setOnClickListener(initClickListener());
        btnCancel.setOnClickListener(initClickListener());
        rl_body.addView(btnFlash);
        rl_body.addView(btnCancel);
        
        progressBar = new ProgressBar(getBaseContext());
        RelativeLayout.LayoutParams pb_LayoutParams = new RelativeLayout.LayoutParams(-0x2, -0x2);
        pb_LayoutParams.addRule(0xd);
        progressBar.setLayoutParams(pb_LayoutParams);
        progressBar.setScrollBarStyle(0x8000000);
        progressBar.setVisibility(0x8);
        rl_body.addView(progressBar);
        tipView = new TextView(getBaseContext());
        tip_Params = new RelativeLayout.LayoutParams(textWidth, -0x2);
        tip_Params.addRule(0xd);
        tipView.setGravity(0x11);
        tipView.setLayoutParams(tip_Params);
        tipView.setText(tip);
        tipView.setTextSize((float)textSize);
        tipView.setTextColor(color);
        rl_body.addView(tipView);
        
        
        return rl_body;
        
    }
    
    private View.OnClickListener initClickListener() {
        return new View.OnClickListener() {
            
           @Override
            public void onClick(View v) {
                if(v.getTag().equals("falsh")) {
                    if(isFlashOn) {
                        if(cameraManager.closeFlashlight()) {
                        	
                            btnFlash.setImageDrawable(getResources().getDrawable(0x7f020002));
                            isFlashOn = false;
                        }
                        return;
                    }
                    if(cameraManager.openFlashlight()) {
                    	
                        btnFlash.setImageDrawable(getResources().getDrawable(0x7f020001));
                        isFlashOn = true;
                    }
                    return;
                }
                if(v.getTag().equals("cancel")) {
                    setResult(0x3e6);
                    finish();
                }
            }
        };
    }
    
    public boolean isDoubleClick(long mTime) {
        long time = System.currentTimeMillis();
        if((time - lastClickTime) < mTime) {
            return true;
        }
        lastClickTime = time;
        return false;
    }
    
    public void surfaceCreated(SurfaceHolder holder) {
        Log.d("cc_smart", "surfaceCreated");
        if(!cameraManager.cameraOpened()) {
            cameraManager.openCamera();
            setParameters();
        }
    }
    
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        if(holder.getSurface() == null) {
            Log.d("cc_smart", "holder.getSurface() == null");
            return;
        }
        Log.v("cc_smart", width + ". h=" + height);
        surfaceHolder = holder;
        cameraManager.setPreviewDisplay(surfaceHolder);
        cameraManager.initDisplay();
        mHandler.sendEmptyMessageDelayed(0x5, (long)startTime);
    }
    
    public void surfaceDestroyed(SurfaceHolder holder) {
        Log.d("cc_smart", "surfaceDestroyed");
        cameraManager.closeCamera();
        //surfaceHolder = 0x0;
    }
    
    protected void onDestroy() {
        super.onDestroy();
        mHandler.removeMessages(0x2);
        mHandler.removeMessages(0x3);
        mHandler.removeMessages(0x4);
        mHandler.removeMessages(0x5);
        mHandler.removeMessages(0x6);
        mHandler.removeMessages(0x8);
        mHandler.removeMessages(0x9);
        mHandler.removeMessages(0xa);
        mHandler.removeMessages(0xb);
        mHandler.removeMessages(0x3ea);
        mHandler.removeMessages(0x64);
        if(cameraManager != null) {
            cameraManager.closeCamera();
        }
    }
}
